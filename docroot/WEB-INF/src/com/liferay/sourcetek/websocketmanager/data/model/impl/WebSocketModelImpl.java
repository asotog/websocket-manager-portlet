/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sourcetek.websocketmanager.data.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sourcetek.websocketmanager.data.model.WebSocket;
import com.liferay.sourcetek.websocketmanager.data.model.WebSocketModel;
import com.liferay.sourcetek.websocketmanager.data.model.WebSocketSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the WebSocket service. Represents a row in the &quot;WebSocketManager_WebSocket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sourcetek.websocketmanager.data.model.WebSocketModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebSocketImpl}.
 * </p>
 *
 * @author alejandro.soto
 * @see WebSocketImpl
 * @see com.liferay.sourcetek.websocketmanager.data.model.WebSocket
 * @see com.liferay.sourcetek.websocketmanager.data.model.WebSocketModel
 * @generated
 */
@JSON(strict = true)
public class WebSocketModelImpl extends BaseModelImpl<WebSocket>
	implements WebSocketModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a web socket model instance should use the {@link com.liferay.sourcetek.websocketmanager.data.model.WebSocket} interface instead.
	 */
	public static final String TABLE_NAME = "WebSocketManager_WebSocket";
	public static final Object[][] TABLE_COLUMNS = {
			{ "websocketId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "port", Types.INTEGER },
			{ "thread_id", Types.VARCHAR },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table WebSocketManager_WebSocket (websocketId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,port INTEGER,thread_id VARCHAR(75) null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table WebSocketManager_WebSocket";
	public static final String ORDER_BY_JPQL = " ORDER BY webSocket.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WebSocketManager_WebSocket.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sourcetek.websocketmanager.data.model.WebSocket"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sourcetek.websocketmanager.data.model.WebSocket"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sourcetek.websocketmanager.data.model.WebSocket"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebSocket toModel(WebSocketSoap soapModel) {
		WebSocket model = new WebSocketImpl();

		model.setWebsocketId(soapModel.getWebsocketId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setPort(soapModel.getPort());
		model.setThread_id(soapModel.getThread_id());
		model.setActive(soapModel.getActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebSocket> toModels(WebSocketSoap[] soapModels) {
		List<WebSocket> models = new ArrayList<WebSocket>(soapModels.length);

		for (WebSocketSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sourcetek.websocketmanager.data.model.WebSocket"));

	public WebSocketModelImpl() {
	}

	public long getPrimaryKey() {
		return _websocketId;
	}

	public void setPrimaryKey(long primaryKey) {
		setWebsocketId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_websocketId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WebSocket.class;
	}

	public String getModelClassName() {
		return WebSocket.class.getName();
	}

	@JSON
	public long getWebsocketId() {
		return _websocketId;
	}

	public void setWebsocketId(long websocketId) {
		_websocketId = websocketId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public int getPort() {
		return _port;
	}

	public void setPort(int port) {
		_port = port;
	}

	@JSON
	public String getThread_id() {
		if (_thread_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _thread_id;
		}
	}

	public void setThread_id(String thread_id) {
		_thread_id = thread_id;
	}

	@JSON
	public boolean getActive() {
		return _active;
	}

	public boolean isActive() {
		return _active;
	}

	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WebSocket toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WebSocket)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					WebSocket.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		WebSocketImpl webSocketImpl = new WebSocketImpl();

		webSocketImpl.setWebsocketId(getWebsocketId());
		webSocketImpl.setName(getName());
		webSocketImpl.setDescription(getDescription());
		webSocketImpl.setPort(getPort());
		webSocketImpl.setThread_id(getThread_id());
		webSocketImpl.setActive(getActive());

		webSocketImpl.resetOriginalValues();

		return webSocketImpl;
	}

	public int compareTo(WebSocket webSocket) {
		int value = 0;

		value = getName().compareTo(webSocket.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WebSocket webSocket = null;

		try {
			webSocket = (WebSocket)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = webSocket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WebSocketModelImpl webSocketModelImpl = this;

		webSocketModelImpl._originalName = webSocketModelImpl._name;

		webSocketModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WebSocket> toCacheModel() {
		WebSocketCacheModel webSocketCacheModel = new WebSocketCacheModel();

		webSocketCacheModel.websocketId = getWebsocketId();

		webSocketCacheModel.name = getName();

		String name = webSocketCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			webSocketCacheModel.name = null;
		}

		webSocketCacheModel.description = getDescription();

		String description = webSocketCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			webSocketCacheModel.description = null;
		}

		webSocketCacheModel.port = getPort();

		webSocketCacheModel.thread_id = getThread_id();

		String thread_id = webSocketCacheModel.thread_id;

		if ((thread_id != null) && (thread_id.length() == 0)) {
			webSocketCacheModel.thread_id = null;
		}

		webSocketCacheModel.active = getActive();

		return webSocketCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{websocketId=");
		sb.append(getWebsocketId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", port=");
		sb.append(getPort());
		sb.append(", thread_id=");
		sb.append(getThread_id());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sourcetek.websocketmanager.data.model.WebSocket");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>websocketId</column-name><column-value><![CDATA[");
		sb.append(getWebsocketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>port</column-name><column-value><![CDATA[");
		sb.append(getPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thread_id</column-name><column-value><![CDATA[");
		sb.append(getThread_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WebSocket.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WebSocket.class
		};
	private long _websocketId;
	private String _name;
	private String _originalName;
	private String _description;
	private int _port;
	private String _thread_id;
	private boolean _active;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private WebSocket _escapedModelProxy;
}